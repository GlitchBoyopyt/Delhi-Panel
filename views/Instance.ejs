<%- include('components/template') %>

<main class="container flex-grow px-4 py-8 mx-auto">
  <div class="flex items-center justify-between w-full pb-4 mx-auto">
    <div class="flex flex-col">
      <h1 class="text-xl font-semibold mb-0.5 heavy">Instances</h1>
      <p class="text-gray-400 text-md">Overview of your servers on <%= name %>.</p>
    </div>

    <% if (req.user.admin) { %>
    <div class="relative inline-block" x-data="{ open: false }">
      <button @click="open = !open" class="flex items-center gap-2 px-5 text-sm font-medium text-white transition-all duration-200 bg-blue-500 rounded-full shadow-lg hover:bg-blue-600">
        <svg class="size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 13.5V3.75m0 9.75a1.5 1.5 0 0 1 0 3m0-3a1.5 1.5 0 0 0 0 3m0 3.75V16.5m12-3V3.75m0 9.75a1.5 1.5 0 0 1 0 3m0-3a1.5 1.5 0 0 0 0 3m0 3.75V16.5m-6-9V3.75m0 3.75a1.5 1.5 0 0 1 0 3m0-3a1.5 1.5 0 0 0 0 3m0 9.75V10.5"/>
        </svg>
        <span>Filter</span>
        <svg class="size-4 transition-transform duration-200" :class="open ? 'rotate-180' : ''" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"/>
        </svg>
      </button>
      <div x-show="open" class="absolute right-0 w-48 mt-2 border shadow-lg rounded-xl bg-white/5 backdrop-blur-xl">
        <div class="py-2">
          <a href="/instances?<%= req.query.see === 'other' ? '' : 'see=other' %>" class="flex items-center gap-2 px-4 py-2.5 text-sm text-white/90 hover:bg-white/10">
            <%= req.query.see === 'other' ? req.translations.showingYourInstances : req.translations.seeAllInstances %>
          </a>
        </div>
      </div>
    </div>
    <% } %>
  </div>

  <div class="grid grid-cols-12 gap-4 px-6 py-3 mt-6 text-sm font-medium text-white/50">
    <div class="col-span-2">Server</div>
    <div class="col-span-2">Status</div>
    <div class="col-span-2">Memory</div>
    <div class="col-span-2">CPU</div>
    <div class="col-span-2">IP Address</div>
  </div>

  <div>
    <% instances.forEach(instance => { %>
    <div class="grid grid-cols-12 gap-4 px-6 py-4 mb-4 transition border border-transparent bg-white/5 rounded-2xl hover:bg-white/10 hover:border-white/10 cursor-pointer"
         id="instanceContainer_<%= instance.Id %>" data-instance-id="<%= instance.Id %>"
         onclick="window.location.href='../instance/<%= instance.Id %>'">
      
      <div class="col-span-2 text-white font-medium"><%= instance.Name %></div>
      
      <div class="col-span-2">
        <div class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full bg-gray-600/20 text-gray-300">
          <div id="status-color_<%= instance.Id %>" class="mr-2 size-2 rounded-full bg-gray-400"></div>
          <span id="status_<%= instance.Id %>">Connecting...</span>
        </div>
      </div>

      <div class="col-span-2 flex items-center gap-2">
        <div class="w-full h-1.5 bg-white/10 rounded-full">
          <div id="ramUsage_<%= instance.Id %>" class="bg-blue-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
        </div>
        <span id="ramUsagetext_<%= instance.Id %>" class="text-xs">0%</span>
      </div>

      <div class="col-span-2 flex items-center gap-2">
        <div class="w-full h-1.5 bg-white/10 rounded-full">
          <div id="cpuUsage_<%= instance.Id %>" class="bg-blue-500 h-1.5 rounded-full transition-all" style="width: 0%"></div>
        </div>
        <span id="cpuUsagetext_<%= instance.Id %>" class="text-xs">0%</span>
      </div>

      <div class="col-span-2 text-gray-300"><%= instance.Node.address %>:<%= instance.Primary %></div>
    </div>

    <script>
      initStatsWebSocket('<%= instance.Id %>');
    </script>
    <% }); %>
  </div>
</main>

<script>
  function updateUsage(stats, instanceId, type) {
    let usageRaw = type === 'ram' ? stats.memory_stats.usage / 1024 / 1024 : (stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage) / (stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage) * 100;
    let usagePercent = isNaN(usageRaw) ? 0 : usageRaw.toFixed(2);
    
    document.getElementById(`${type}Usage_${instanceId}`).style.width = `${usagePercent}%`;
    document.getElementById(`${type}Usagetext_${instanceId}`).textContent = `${usagePercent}%`;
  }

  function updateStatus(stats, instanceId) {
    let statusEl = document.getElementById(`status_${instanceId}`);
    let colorEl = document.getElementById(`status-color_${instanceId}`);

    if (stats.memory_stats.usage > 1) {
      statusEl.textContent = 'Online';
      colorEl.className = 'size-2 rounded-full bg-emerald-500';
    } else {
      statusEl.textContent = 'Offline';
      colorEl.className = 'size-2 rounded-full bg-red-500';
    }
  }

  function initStatsWebSocket(instanceId) {
    let ws = new WebSocket(`${location.protocol === 'https:' ? 'wss' : 'ws'}://${location.hostname}:${location.port}/stats/${instanceId}`);

    ws.onmessage = event => {
      if (event.data.includes("Node Offline")) {
        document.getElementById(`status_${instanceId}`).textContent = 'Node Offline';
        return;
      }
      if (event.data.includes("Container not found")) {
        document.getElementById(`status_${instanceId}`).textContent = 'Container Not Found';
        return;
      }
      
      let stats = JSON.parse(event.data);
      updateUsage(stats, instanceId, 'ram');
      updateUsage(stats, instanceId, 'cpu');
      updateStatus(stats, instanceId);
    };

    ws.onclose = () => setTimeout(() => initStatsWebSocket(instanceId), 3000);
  }
</script>
